
name:  $(GitVersion.NuGetVersion)

resources:
- repo: self
  fetchDepth: 30

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  #MSBUILDSINGLELOADCONTEXT: '1'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      name: DCT
      demands:
      - IsBuildServer
      #- TestBuildServer
      
    steps:
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet >=5.3.1'
      enabled: false
      inputs:
        versionSpec: '>=5.3.1'

    - task: gittools.gitversion.gitversion-task.GitVersion@4
      inputs:
        updateAssemblyInfo: true
        preferBundledVersion: false
      displayName: GitVersion

    - task: DotNetCoreInstaller@2
      inputs:
        version: 3.1.x
      displayName: 'Use .NET Core sdk 3.1 (latest)'

    # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: |
            dotnet tool update --global dotnet-reportgenerator-globaltool --version 4.3.6
      displayName: update dotnet-reportgenerator-globaltool
      continueOnError: true  
      enabled: false

    - task: Npm@1
      displayName: 'NPM Install'
      inputs:
        command: 'install'
        workingDir: 'src\ESFA.DC.LARS.Web'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Nuget packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'
        vstsFeed: 'dct-pkg'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        vstsFeed: 'dct-pkg'
        projects: '**/*.csproj'
        configuration: $(BuildConfiguration) 
        arguments: '-p:version="$(GitVersion.AssemblySemVer)" -p:FileVersion="$(GitVersion.AssemblySemFileVer)"'
  
    - script: npm run-script build
      displayName:  Run npm build
      workingDirectory: '$(Build.SourcesDirectory)\src\ESFA.DC.LARS.Web'  # location of package.json
      
    - task: DotNetCoreCLI@2
      displayName: 'Build WebJob in Temp Folder'
      inputs:
        command: 'build'
        vstsFeed: 'dct-pkg'
        projects: '**/ESFA.DC.LARS.AzureSearch/ESFA.DC.LARS.AzureSearch.csproj'
        configuration: $(BuildConfiguration) 
        arguments: '-p:version="$(GitVersion.AssemblySemVer)" -p:FileVersion="$(GitVersion.AssemblySemFileVer)" --output "$(build.SourcesDirectory)\tmp\app_Data\Jobs\Triggered\ESFA.DC.LARS.AzureSearch"'

    # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
    - task: DotNetCoreCLI@2
      displayName: Run .net Core Unit Tests
      inputs:
        command: test
        projects: |
          '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        nobuild: true

    - script: npm run test
      displayName:  Run JavaScript Unit Tests
      workingDirectory: '$(Build.SourcesDirectory)\src\ESFA.DC.LARS.Web'  # location of package.json

    ## Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    #- script: |
    #    dotnet tool update -g dotnet-reportgenerator-globaltool --version 4.3.6  
    #    reportgenerator -reports:$(Build.SourcesDirectory)/**/*Tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
    #  displayName: Create Code coverage report
      
    # Publish the code coverage result (summary and web site)
    # The summary allows to view the coverage percentage in the summary tab
    # The web site allows to view which lines are covered directly in Azure Pipeline
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

    - task: DotNetCoreCLI@2
      displayName: 'Package Api Artifact Folder'
      inputs:
        command: publish
        configuration: $(BuildConfiguration) 
        publishWebProjects: false
        zipAfterPublish: true
        nobuild: true
        projects: '**/ESFA.DC.LARS.API.csproj'
        arguments: '--output "$(build.artifactstagingdirectory)\Web\API"  -p:version="$(Build.BuildNumber)" -p:FileVersion="$(Build.BuildNumber)"'
        vstsFeed: 'dct-pkg'

    - task: DotNetCoreCLI@2
      displayName: 'Package UI Artifact Folder'
      inputs:
        command: publish
        configuration: $(BuildConfiguration) 
        publishWebProjects: false
        zipAfterPublish: true
        nobuild: true
        projects: '**/ESFA.DC.LARS.Web.csproj'
        arguments: '--output "$(build.artifactstagingdirectory)\Web\UI"  -p:version="$(Build.BuildNumber)" -p:FileVersion="$(Build.BuildNumber)"'
        vstsFeed: 'dct-pkg'

    ## Web Job - Publish Project
    - task: PowerShell@1
      enabled: true
      displayName: 'Web Job - Create settings.job via PowerShell Script'
      inputs:
        scriptType: inlineScript
        workingFolder: '"$(build.SourcesDirectory)\tmp\app_Data\Jobs\Triggered\ESFA.DC.LARS.AzureSearch"'
        inlineScript: |
         $cmdCommand='{"schedule": "0 0 06 * * 1-5"}'
         $cmdCommand| Out-File -FilePath settings.job -Encoding ascii
         
    - task: PowerShell@1
      enabled: true
      displayName: 'Web Job - Create run.cmd'
      inputs:
        scriptType: inlineScript
        workingFolder: '"$(build.SourcesDirectory)\tmp\app_Data\Jobs\Triggered\ESFA.DC.LARS.AzureSearch"'
        inlineScript: |
         $cmdCommand="dotnet ESFA.DC.LARS.AzureSearch.dll run-manual"
         $cmdCommand| Out-File -FilePath run.cmd -Encoding ascii

    ## Create Zip File for Deployment     
    - task: ArchiveFiles@2
      displayName: 'Package WebJobs for Website'
      inputs:
        rootFolderOrFile: '$(build.SourcesDirectory)\tmp'
        includeRootFolder: false
        archiveFile: '$(build.ArtifactStagingDirectory)\Web\WebJobs.zip'

    ## Publish Web Artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Web'
      enabled: true
      inputs:
        ArtifactName: Web
        PathtoPublish: '$(build.artifactstagingdirectory)\Web'