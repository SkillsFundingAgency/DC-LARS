name: $(GitVersion_NuGetVersion)

resources:
- repo: self
  fetchDepth: 30

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'

steps:
- task: gittools.gitversion.gitversion-task.GitVersion@4
  inputs:
    updateAssemblyInfo: true
    preferBundledVersion: false
  displayName: GitVersion

- task: DotNetCoreInstaller@2
  inputs:
    version: 2.2.207
  displayName: 'Use .NET Core sdk 2.2.7 (VS2019 = 2.2.207)'

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool

- task: Npm@1
  displayName: 'NPM Install'
  inputs:
    command: 'install'
    workingDir: 'src\ESFA.DC.LARS.Web'

- task: DotNetCoreCLI@2
  displayName: 'Restore Nuget packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: 'dct-pkg'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    configuration: $(BuildConfiguration) 
    arguments: '-p:version="$(Build.BuildNumber)" -p:FileVersion="$(Build.BuildNumber)"'

- task: DotNetCoreCLI@2
  displayName: 'Package Api Artifact Folder'
  inputs:
    command: publish
    configuration: $(BuildConfiguration) 
    publishWebProjects: false
    zipAfterPublish: true
    nobuild: true
    projects: '**/ESFA.DC.LARS.API.csproj'
    arguments: '--output "$(build.artifactstagingdirectory)\Web\API"  -p:version="$(Build.BuildNumber)" -p:FileVersion="$(Build.BuildNumber)"'
    vstsFeed: 'dct-pkg'

- task: DotNetCoreCLI@2
  displayName: 'Package UI Artifact Folder'
  inputs:
    command: publish
    configuration: $(BuildConfiguration) 
    publishWebProjects: false
    zipAfterPublish: true
    nobuild: true
    projects: '**/ESFA.DC.LARS.Web.csproj'
    arguments: '--output "$(build.artifactstagingdirectory)\Web\UI"  -p:version="$(Build.BuildNumber)" -p:FileVersion="$(Build.BuildNumber)"'
    vstsFeed: 'dct-pkg'

- task: DotNetCoreCLI@2
  enabled: false
  displayName: 'Run xUnit Test'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    projects: |
        **/*Tests/*.csproj
        !**/*AcceptanceTests/*.csproj

- task: DotNetCoreCLI@2
  enabled: false
  displayName: 'Run xUnit Test'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
    projects: |
        **/*Tests/*.csproj
        !**/*AcceptanceTests/*.csproj


- script: dotnet reportgenerator "-reports:$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml" "-targetDir:$(Build.SourcesDirectory)/TestResults/Coverage/Reports" -tag:$(Build.BuildNumber) -reportTypes:htmlInline
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Generate Code Coverage Report'
  
- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Web'
  enabled: true
  inputs:
    ArtifactName: Web
    PathtoPublish: '$(build.artifactstagingdirectory)\Web'